version: 2

vm_settings: &vm_settings
  docker:
    # https://circleci.com/docs/2.0/circleci-images/#nodejs
    - image: circleci/node:latest-browsers
  working_directory: ~/app

install_restore_cache: &install_restore_cache
  name: Restore cached dependencies
  keys:
    - dependencies-{{ checksum "yarn.lock" }}
    # Fall back to using the latest cache if no exact match is found
    - dependencies

install_run: &install_run
  name: Install dependencies with Yarn, purely from the lockfile
  command: yarn install --frozen-lockfile

install_save_cache: &install_save_cache
  name: Cache installed dependencies
  paths:
    - ~/.cache
  key: dependencies-{{ checksum "yarn.lock" }}

deploy_app: &deploy_app
  name: Deploy
  command: |
    if [ $CIRCLE_BRANCH == $SOURCE_BRANCH ]; then
      git config --global user.email $GH_EMAIL
      git config --global user.name $GH_NAME

      git clone $CIRCLE_REPOSITORY_URL out
      cd out
      git checkout ${TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH
      git rm -rf .
      cd ..
      
      yarn build

      cp -a build/. out/.

      mkdir -p out/.circleci && cp -a .circleci/. out/.circleci/.
      cd out 

      git add -A
      git commit -m "Automated deployment to GitHub Pages: %{CIRCLE_SHA1}" --allow-empty

      git push origin $TARGET_BRANCH
    fi

jobs:
  test:
    <<: *vm_settings
    steps:
      - checkout

      # Install dependencies
      - restore_cache: *install_restore_cache
      - run: *install_run
      - save_cache: *install_save_cache

      - run:
          name: Run tests
          # Install libgconf, needed by Cypress' Electron, then run tests
          command: sudo apt-get install libgconf-2-4 && yarn test:ci

      # Store test artifacts
      - store_artifacts:
          path: tests/unit/coverage
      - store_artifacts:
          path: tests/e2e/videos
      - store_artifacts:
          path: tests/e2e/screenshots

  build:
    <<: *vm_settings
    branches:
      ignore:
        - gh-pages
    environment:
      - SOURCE_BRANC: master
      - TARGET_BRANCH: gh-pages
    steps:
      - checkout

      # Install dependencies
      - restore_cache: *install_restore_cache
      - run: *install_run
      - save_cache: *install_save_cache

      - run:
          name: Build for production
          command: yarn build:ci

      # Store build artifacts
      - store_artifacts:
          path: dist

    deploy:
      <<: *vm_settings
      steps:
        # Install dependencies
        - restore_cache: *install_restore_cache
        - run: *install_run
        - save_cache: *install_save_cache
        # Build the app for production
        - run: yarn build
        - run: *deploy_app

workflows:
  version: 2
  test_build_deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
